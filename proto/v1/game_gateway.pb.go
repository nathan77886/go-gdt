// Code generated by protoc-gen-gateway. DO NOT EDIT.
// source: proto/v1/game.proto

package v1

import (
	"context"
	"fmt"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
	"sync"
)

type GatewayHandler func(ctx context.Context, payload []byte) (respCode uint32, out []byte, err error)

type Router struct {
	mu       sync.RWMutex
	handlers map[uint32]GatewayHandler
}

func NewRouter() *Router { return &Router{handlers: make(map[uint32]GatewayHandler)} }

func (r *Router) Register(code uint32, h GatewayHandler) {
	r.mu.Lock()
	defer r.mu.Unlock()
	if _, ok := r.handlers[code]; ok {
		panic(fmt.Sprintf("duplicate gateway code: %d", code))
	}
	r.handlers[code] = h
}

func (r *Router) Dispatch(ctx context.Context, code uint32, payload []byte) (uint32, []byte, error) {
	r.mu.RLock()
	h, ok := r.handlers[code]
	r.mu.RUnlock()
	if !ok {
		return 0, nil, fmt.Errorf("no handler for code %d", code)
	}
	return h(ctx, payload)
}

// GameGatewaySet 聚合本 proto 文件中定义的 gRPC 客户端。
type GameGatewaySet struct {
	gameService GameServiceClient
}

// NewGameGatewaySet 用一个 gRPC 连接构造所有客户端。
func NewGameGatewaySet(cc grpc.ClientConnInterface) *GameGatewaySet {
	return &GameGatewaySet{
		gameService: NewGameServiceClient(cc),
	}
}

// RegisterGameGateway 将本文件内的所有网关处理器注册到路由器。
func RegisterGameGateway(r *Router, set *GameGatewaySet) {
	r.Register(10001, handle_gameservice_roleinfo_10001(set))
}

func handle_gameservice_roleinfo_10001(set *GameGatewaySet) GatewayHandler {
	return func(ctx context.Context, payload []byte) (uint32, []byte, error) {
		in := new(RoleInfoRequest)
		if err := proto.Unmarshal(payload, in); err != nil {
			return 0, nil, fmt.Errorf("unmarshal request failed: %w", err)
		}
		out, err := set.gameService.RoleInfo(ctx, in)
		if err != nil {
			return 0, nil, err
		}
		bs, err := proto.Marshal(out)
		if err != nil {
			return 0, nil, fmt.Errorf("marshal response failed: %w", err)
		}
		return 10001, bs, nil
	}
}
